import React, { useState, useEffect } from 'react';
import { Download } from 'lucide-react';

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

export const PWADownloadButton: React.FC = () => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [isInstalled, setIsInstalled] = useState(false);
  const [isInstalling, setIsInstalling] = useState(false);

  useEffect(() => {
    // V√©rifier si l'app est d√©j√† install√©e
    if (window.matchMedia('(display-mode: standalone)').matches) {
      setIsInstalled(true);
      return;
    }

    // √âcouter l'√©v√©nement beforeinstallprompt
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
    };

    // √âcouter l'√©v√©nement appinstalled
    const handleAppInstalled = () => {
      setIsInstalled(true);
      setDeferredPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  const handleInstallClick = async () => {
    setIsInstalling(true);
    
    try {
      if (deferredPrompt) {
        // Utiliser le prompt natif si disponible
        await deferredPrompt.prompt();
        const choiceResult = await deferredPrompt.userChoice;
        
        if (choiceResult.outcome === 'accepted') {
          console.log('PWA install√©e avec succ√®s');
          setIsInstalled(true);
        } else {
          console.log('Installation PWA refus√©e');
        }
      } else {
        // FORCER L'INSTALLATION PWA - M√âTHODES MULTIPLES
        console.log('üöÄ TENTATIVE D\'INSTALLATION PWA FORC√âE...');
        
        // M√©thode 1: V√©rifier le manifest
        const manifestLink = document.querySelector('link[rel="manifest"]') as HTMLLinkElement;
        if (manifestLink) {
          console.log('‚úÖ Manifest trouv√©:', manifestLink.href);
        } else {
          console.log('‚ùå Manifest non trouv√©');
        }
        
        // M√©thode 2: V√©rifier le service worker
        if ('serviceWorker' in navigator) {
          console.log('‚úÖ Service Worker support√©');
          navigator.serviceWorker.getRegistrations().then(registrations => {
            console.log('Service Workers actifs:', registrations.length);
          });
        } else {
          console.log('‚ùå Service Worker non support√©');
        }
        
        // M√©thode 3: Essayer de d√©clencher l'√©v√©nement manuellement
        console.log('üîÑ Tentative de d√©clenchement manuel...');
        
        // M√©thode 4: V√©rifier les crit√®res PWA
        const isHTTPS = location.protocol === 'https:' || location.hostname === 'localhost';
        const hasManifest = !!manifestLink;
        const hasServiceWorker = 'serviceWorker' in navigator;
        
        console.log('Crit√®res PWA:', {
          HTTPS: isHTTPS,
          Manifest: hasManifest,
          ServiceWorker: hasServiceWorker
        });
        
        // M√©thode 5: Instructions d√©taill√©es avec diagnostic
        const diagnostic = `
üîç DIAGNOSTIC PWA :
- HTTPS: ${isHTTPS ? '‚úÖ' : '‚ùå'}
- Manifest: ${hasManifest ? '‚úÖ' : '‚ùå'}
- Service Worker: ${hasServiceWorker ? '‚úÖ' : '‚ùå'}
- Prompt disponible: ${deferredPrompt ? '‚úÖ' : '‚ùå'}
        `;
        
        const instructions = `
üöÄ INSTALLATION PWA - Carnet de S√©curit√©

${diagnostic}

üì± SUR ANDROID (Chrome) :
1. Ouvrez le menu Chrome (‚ãÆ) en haut √† droite
2. S√©lectionnez "Installer l'application" ou "Ajouter √† l'√©cran d'accueil"
3. Ou cherchez l'ic√¥ne d'installation (‚¨áÔ∏è) dans la barre d'adresse

üíª SUR DESKTOP (Chrome/Edge) :
1. Cherchez l'ic√¥ne d'installation (‚¨áÔ∏è) dans la barre d'adresse
2. Ou menu Chrome (‚ãÆ) > "Installer l'application"
3. Ou Ctrl+Shift+I > Application > Manifest > Install

üçé SUR iOS (Safari) :
1. Appuyez sur le bouton de partage (‚ñ°‚Üë) en bas
2. S√©lectionnez "Sur l'√©cran d'accueil"

‚ö†Ô∏è Si aucune option n'appara√Æt :
- Rechargez la page (F5)
- Attendez 10 secondes et r√©essayez
- V√©rifiez que vous √™tes en HTTPS
        `;
        
        alert(instructions);
      }
    } catch (error) {
      console.error('Erreur lors de l\'installation PWA:', error);
      alert('Erreur lors de l\'installation. V√©rifiez que votre navigateur supporte les PWA.');
    } finally {
      setIsInstalling(false);
    }
  };

  // Debug : toujours afficher le bouton pour tester
  console.log('PWA Button State:', { isInstalled, deferredPrompt: !!deferredPrompt });

  return (
    <div className="bg-red-500 p-1 text-white text-xs">
      PWA BTN
      <button
        onClick={handleInstallClick}
        disabled={isInstalling}
        className="ml-2 flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 text-white rounded-lg transition-colors shadow-lg text-sm font-medium"
      >
        {isInstalling ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            <span>Installation...</span>
          </>
        ) : (
          <>
            <Download className="h-4 w-4" />
            <span>Installer l'app</span>
          </>
        )}
      </button>
    </div>
  );
};