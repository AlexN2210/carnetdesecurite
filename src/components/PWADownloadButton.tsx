import React, { useState, useEffect } from 'react';
import { Download } from 'lucide-react';

interface BeforeInstallPromptEvent extends Event {
  readonly platforms: string[];
  readonly userChoice: Promise<{
    outcome: 'accepted' | 'dismissed';
    platform: string;
  }>;
  prompt(): Promise<void>;
}

export const PWADownloadButton: React.FC = () => {
  const [deferredPrompt, setDeferredPrompt] = useState<BeforeInstallPromptEvent | null>(null);
  const [isInstalled, setIsInstalled] = useState(false);
  const [isInstalling, setIsInstalling] = useState(false);

  useEffect(() => {
    // V√©rifier si l'app est d√©j√† install√©e
    if (window.matchMedia('(display-mode: standalone)').matches) {
      setIsInstalled(true);
      return;
    }

    // √âcouter l'√©v√©nement beforeinstallprompt
    const handleBeforeInstallPrompt = (e: Event) => {
      e.preventDefault();
      setDeferredPrompt(e as BeforeInstallPromptEvent);
    };

    // √âcouter l'√©v√©nement appinstalled
    const handleAppInstalled = () => {
      setIsInstalled(true);
      setDeferredPrompt(null);
    };

    window.addEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
    window.addEventListener('appinstalled', handleAppInstalled);

    return () => {
      window.removeEventListener('beforeinstallprompt', handleBeforeInstallPrompt);
      window.removeEventListener('appinstalled', handleAppInstalled);
    };
  }, []);

  const handleInstallClick = async () => {
    setIsInstalling(true);
    
    try {
      // FORCER L'INSTALLATION PWA - M√âTHODES MULTIPLES
      console.log('üöÄ TENTATIVE D\'INSTALLATION PWA FORC√âE...');
      
      // M√©thode 1: V√©rifier le manifest
      const manifestLink = document.querySelector('link[rel="manifest"]') as HTMLLinkElement;
      const isHTTPS = location.protocol === 'https:' || location.hostname === 'localhost';
      const hasManifest = !!manifestLink;
      const hasServiceWorker = 'serviceWorker' in navigator;
      
      console.log('Crit√®res PWA:', {
        HTTPS: isHTTPS,
        Manifest: hasManifest,
        ServiceWorker: hasServiceWorker,
        Prompt: !!deferredPrompt
      });
      
      // M√©thode 2: Essayer de d√©clencher l'installation via le service worker
      if ('serviceWorker' in navigator) {
        try {
          const registration = await navigator.serviceWorker.ready;
          console.log('‚úÖ Service Worker pr√™t:', registration);
          
          // Essayer de d√©clencher l'installation
          if (registration.active) {
            console.log('üîÑ Service Worker actif, tentative d\'installation...');
          }
        } catch (error) {
          console.log('‚ùå Erreur Service Worker:', error);
        }
      }
      
      // M√©thode 3: Essayer de forcer l'√©v√©nement beforeinstallprompt
      console.log('üîÑ Tentative de d√©clenchement manuel de l\'√©v√©nement...');
      
      // Cr√©er un √©v√©nement personnalis√©
      const customEvent = new CustomEvent('beforeinstallprompt', {
        detail: {
          platforms: ['web'],
          userChoice: Promise.resolve({ outcome: 'accepted', platform: 'web' })
        }
      });
      
      // M√©thode 4: Instructions avec boutons d'action
      const instructions = `
üöÄ INSTALLATION PWA - Carnet de S√©curit√©

üîç DIAGNOSTIC :
- HTTPS: ${isHTTPS ? '‚úÖ' : '‚ùå'}
- Manifest: ${hasManifest ? '‚úÖ' : '‚ùå'}
- Service Worker: ${hasServiceWorker ? '‚úÖ' : '‚ùå'}
- Prompt: ${deferredPrompt ? '‚úÖ' : '‚ùå'}

üì± SUR ANDROID (Chrome) :
1. Menu Chrome (‚ãÆ) ‚Üí "Installer l'application"
2. Ou ic√¥ne d'installation (‚¨áÔ∏è) dans la barre d'adresse
3. Ou "Ajouter √† l'√©cran d'accueil"

üíª SUR DESKTOP (Chrome/Edge) :
1. Ic√¥ne d'installation (‚¨áÔ∏è) dans la barre d'adresse
2. Menu Chrome (‚ãÆ) ‚Üí "Installer l'application"
3. F12 ‚Üí Application ‚Üí Manifest ‚Üí Install

üçé SUR iOS (Safari) :
1. Bouton partage (‚ñ°‚Üë) ‚Üí "Sur l'√©cran d'accueil"

‚ö†Ô∏è Si rien n'appara√Æt :
- Rechargez la page (F5)
- Attendez 30 secondes
- V√©rifiez HTTPS
      `;
      
      // Afficher les instructions
      alert(instructions);
      
      // M√©thode 5: Essayer de d√©clencher l'installation apr√®s un d√©lai
      setTimeout(() => {
        console.log('üîÑ Nouvelle tentative d\'installation...');
        
        // V√©rifier si le prompt est maintenant disponible
        if (deferredPrompt) {
          console.log('‚úÖ Prompt maintenant disponible !');
          deferredPrompt.prompt().then(() => {
            console.log('üöÄ Installation lanc√©e !');
          });
        } else {
          console.log('‚ùå Prompt toujours indisponible');
          
          // M√©thode 6: Cr√©er un lien de t√©l√©chargement direct
          console.log('üîÑ Cr√©ation d\'un lien de t√©l√©chargement direct...');
          
          // Cr√©er un lien vers le manifest
          const manifestUrl = manifestLink?.href || '/manifest.json';
          const downloadLink = document.createElement('a');
          downloadLink.href = manifestUrl;
          downloadLink.download = 'carnet-securite.json';
          downloadLink.textContent = 'T√©l√©charger le manifest';
          
          // Essayer de d√©clencher le t√©l√©chargement
          try {
            downloadLink.click();
            console.log('‚úÖ Lien de t√©l√©chargement cr√©√©');
          } catch (error) {
            console.log('‚ùå Erreur lors de la cr√©ation du lien:', error);
          }
        }
      }, 2000);
      
    } catch (error) {
      console.error('Erreur lors de l\'installation PWA:', error);
      alert('Erreur lors de l\'installation. V√©rifiez que votre navigateur supporte les PWA.');
    } finally {
      setIsInstalling(false);
    }
  };

  // Debug : toujours afficher le bouton pour tester
  console.log('PWA Button State:', { isInstalled, deferredPrompt: !!deferredPrompt });

  return (
    <div className="bg-red-500 p-1 text-white text-xs">
      PWA BTN
      <button
        onClick={handleInstallClick}
        disabled={isInstalling}
        className="ml-2 flex items-center space-x-2 px-4 py-2 bg-blue-600 hover:bg-blue-700 disabled:bg-blue-800 text-white rounded-lg transition-colors shadow-lg text-sm font-medium"
      >
        {isInstalling ? (
          <>
            <div className="animate-spin rounded-full h-4 w-4 border-2 border-white border-t-transparent"></div>
            <span>Installation...</span>
          </>
        ) : (
          <>
            <Download className="h-4 w-4" />
            <span>Installer l'app</span>
          </>
        )}
      </button>
    </div>
  );
};